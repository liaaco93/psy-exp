// Generated by CoffeeScript 1.7.1

/*
  TODO: be able to display errors on page if they occur
    an issue because of asynchronicity, need to hook up the page somehow
  TODO: update page as db is updated
 */

(function() {
  var Experiment, User, addUser, createExperiment, crypto, dbSchemata, emailer, expUsersTemplate, handleError, inviteAll, inviteOne, jade, logInAdmin, logInUser, mongoose, settings, showAdminCPanel, showExpUsers, showExperiments, showUserLogin, showUserPage, submitUserForm, _;

  mongoose = require('mongoose');

  jade = require('jade');

  crypto = require('crypto');

  _ = require('underscore');

  emailer = require('./modules/emailer');

  dbSchemata = require('./modules/dbSetup');

  settings = require('./config');

  User = mongoose.model('users', dbSchemata.UserSchema);

  Experiment = mongoose.model('experiments', dbSchemata.ExperimentSchema);

  handleError = function(err, res) {
    console.error(err);
    return res.send(500);
  };


  /*
    Start of User functions:
      show user login page
      log in user
      show user experiment page
      handle data from user experiment page submission
   */


  /*
    Serves user login page /TODO: no such page
   */

  showUserLogin = function(req, res) {
    console.log("GET user login page");
    return jade.renderFile('server/views/user-login.jade', {}, function(errJade, htmlResult) {
      if (errJade) {
        return handleError(errJade, res);
      } else {
        return res.send(htmlResult);
      }
    });
  };


  /*
    Logs in user
   */

  logInUser = function(req, res) {
    var hashedPass;
    console.log("POST attempting to log in " + req.params.uid);
    hashedPass = crypto.createHash('sha512');
    hashedPass.update(req.params.pass, 'ascii');
    return Users.findOne({
      uid: req.params.uid,
      hashedPassword: hashedPass.digest('hex')
    }, function(errQuery, usrQuery) {
      if (errQuery) {
        return handleError(errQuery, res);
      } else if (!usrQuery) {
        console.error('logInUser: invalid uid or pass');
        return res.send(400);
      } else {
        return res.send(200);
      }
    });
  };


  /*
  	Serves user's experiment page, showing user uid and status
   */

  showUserPage = function(req, res) {
    var usr;
    console.log("GET request from " + req.params.id);
    usr = User.findById(mongoose.Types.ObjectId(req.params.id));
    return usr.exec(function(errQuery, usrQuery) {
      if (errQuery) {
        return handleError(errQuery, res);
      } else if (!usrQuery) {
        console.error('showUserPage: _id not found');
        return res.send(404);
      } else {
        return jade.renderFile('server/views/user-submit.jade', {
          uid: usrQuery.uid,
          status: usrQuery.status
        }, function(errJade, htmlResult) {
          if (errJade) {
            return handleError(errJade, res);
          } else {
            return res.send(htmlResult);
          }
        });
      }
    });
  };


  /*
    Handles experiment page submission, currently only updates user status
   */

  submitUserForm = function(req, res) {
    console.log("POST request from " + req.params.id);
    return User.findByIdAndUpdate(mongoose.Types.ObjectId(req.params.id), {
      '$set': {
        'status': 'completed'
      }
    }, function(errQuery, usrQuery) {
      if (errQuery) {
        return handleError(errQuery, res);
      } else if (!usrQuery) {
        console.error('submitUserForm: _id not found');
        return res.send(404);
      } else {
        console.log('uid: ' + usrQuery.uid + '| status: ' + usrQuery.status);
        return res.send(200);
      }
    });
  };


  /*
    Start of Admin functions
      log in admin
      show admin page/login
      create a new experiment
      show experiment table
      show user table
      add a user
      invites a user /TODO update to use experiment's user table
      invites all users /TODO update to use experiment's user table
   */


  /*
    Logs in the Admin
   */

  logInAdmin = function(req, res) {
    console.log("POST admin log in with credentials " + req.body.user + " " + req.body.pass);
    if (req.body.pass === settings.confSite.adminUser[req.body.user]) {
      req.session.name = req.body.user;
      return res.send(200);
    } else {
      return res.send(400);
    }
  };


  /*
    Show admin page
   */

  showAdminCPanel = function(req, res) {
    var page;
    console.log("GET admin control panel");
    if (req.session.name) {
      page = 'server/views/admin-gui.jade';
    } else {
      page = 'server/views/admin-login.jade';
    }
    return jade.renderFile(page, {}, function(errJade, htmlResult) {
      if (errJade) {
        return handleError(errJade, res);
      } else {
        return res.send(htmlResult);
      }
    });
  };


  /*
    Creates a new experiment
   */

  createExperiment = function(req, res) {
    console.log("POST new experiment");
    console.log(req.body);
    return Experiment.create({
      name: req.body.name,
      "private": req.body["private"] === 'true' ? true : false,
      anonymous: req.body.anonymous === 'true' ? true : false,
      timeLimit: req.body.timeLimit,
      start: new Date(req.body.start),
      end: new Date(req.body.end),
      users: []
    }, function(saveErr, exp) {
      if (saveErr) {
        return handleError(saveErr, res);
      } else {
        console.log(exp);
        return res.send(200);
      }
    });
  };


  /*
    Returns full table of experiments
   */

  showExperiments = function(req, res) {
    console.log("GET experiments table");
    return Experiment.find({}, function(errQuery, doc) {
      if (errQuery) {
        return handleError(errQuery, res);
      } else {
        return res.send(doc);
      }
    });
  };


  /*
    Renders the Jade page for the user table of an experiment
   */

  expUsersTemplate = function(req, res) {
    console.log("GET page for experiment " + req.params.eid);
    return jade.renderFile("server/views/admin-gui-usertable.jade", {
      eid: req.params.eid
    }, function(errJade, htmlResult) {
      if (errJade) {
        return handleError(errJade, res);
      } else {
        return res.send(htmlResult);
      }
    });
  };


  /*
    Queries db for users in an experiment
   */

  showExpUsers = function(req, res) {
    console.log("GET users from experiment " + req.params.eid);
    return Experiment.findById(mongoose.Types.ObjectId(req.params.eid), "users", function(errExpQuery, expQuery) {
      if (errExpQuery) {
        return handleError(errExpQuery, res);
      } else {
        console.log(expQuery.users);
        return res.send(expQuery);
      }
    });
  };


  /*
    Adds one user using fields {uid, email}
   */

  addUser = function(req, res) {
    console.log("POST add user uid:" + req.body.uid + " email:" + req.body.email + " to exp " + req.body.eid);
    return Experiment.find({
      '_id': mongoose.Types.ObjectId(req.body.eid),
      '$or': [
        {
          'users.uid': req.body.uid
        }, {
          'users.email': req.body.email
        }
      ]
    }, function(errQuery, usrQuery) {
      if (errQuery) {
        return handleError(errQuery, res);
      } else if (usrQuery.length) {
        console.error('addUser: uid or email already exists');
        return res.send(400);
      } else {
        return Experiment.findById(mongoose.Types.ObjectId(req.body.eid), function(errExpQuery, expQuery) {
          if (errExpQuery) {
            return handleError(errExpQuery, res);
          } else {
            expQuery.users.push({
              'uid': req.body.uid,
              'email': req.body.email,
              'status': 'uninvited'
            });
            return expQuery.save(function(errSave, newUserDoc) {
              if (errSave) {
                return handleError(errSave, res);
              } else {
                console.log("Saved " + newUserDoc);
                return res.send(200);
              }
            });
          }
        });
      }
    });
  };


  /*
    Sends an e-mail to uninvited user indicated by uid
    Updates status to invited
   */

  inviteOne = function(req, res) {
    var usr;
    console.log("POST invite " + req.body.uid + " from exp " + req.body.eid);
    usr = Experiment.find({
      '_id': mongoose.Types.ObjectId(req.body.eid),
      'users': {
        'uid': req.body.uid,
        'status': 'uninvited'
      }
    });
    return usr.exec(function(errQuery, usrQuery) {
      if (errQuery) {
        return handleError(errQuery, res);
      } else if (!usrQuery) {
        console.error('inviteOne: no such user or user already invited');
        return res.send(400);
      } else {
        return jade.renderFile('server/views/email-invite.jade', {
          expname: 'Default',
          rooturl: settings.confSite.rootUrl,
          uid: usr._id
        }, function(errJade, htmlResult) {
          if (errJade) {
            return handleError(errJade, res);
          } else {
            return emailer.sendEmail(usr.email, 'Invitation', htmlResult, function(errMail, resMail) {
              if (errMail) {
                return handleError(errMail, res);
              } else {
                console.log(resMail);
                usr.status = 'invited';
                return usr.save(function(errSave) {
                  if (errSave) {
                    return handleError(errSave, res);
                  }
                });
              }
            });
          }
        });
      }
    });
  };


  /*
    Sends e-mails to all uninvited users
    Updates each status to invited
   */

  inviteAll = function(req, res) {
    var usrs;
    console.log("POST: invite all uninvited from exp " + req.body.eid);
    usrs = User.find({
      'status': 'uninvited'
    });
    return usrs.exec(function(errQuery, usrQuery) {
      var replySent, usr, _i, _len, _results;
      if (errQuery) {
        console.error(errQuery);
        return res.send(500);
      } else if (usrQuery.length === 0) {
        console.error('inviteAll: no uninvited users');
        return res.send(400);
      } else {
        replySent = false;
        _results = [];
        for (_i = 0, _len = usrQuery.length; _i < _len; _i++) {
          usr = usrQuery[_i];
          _results.push(jade.renderFile('server/views/email-invite.jade', {
            expname: 'Default',
            rooturl: settings.confSite.rootUrl,
            uid: usr._id
          }, function(errJade, htmlResult) {
            if (errJade) {
              console.error(errJade);
              if (!replySent) {
                replySent = true;
                return res.send(500);
              }
            } else {
              return emailer.sendEmail(usr.email, 'Invitation', htmlResult, function(errMail, resMail) {
                if (errMail) {
                  console.error(errMail);
                  if (!replySent) {
                    replySent = true;
                    return res.send(500);
                  }
                } else {
                  console.log(resMail);
                  usr.status = 'invited';
                  return usr.save(function(errSave) {
                    if (errSave) {
                      console.error(errSave);
                      if (!replySent) {
                        replySent = true;
                        return res.send(500);
                      }
                    } else if (usr === usrQuery.slice(-1)[0]) {
                      replySent = true;
                      return res.send(200);
                    }
                  });
                }
              });
            }
          }));
        }
        return _results;
      }
    });
  };

  exports.showUserLogin = showUserLogin;

  exports.logInUser = logInUser;

  exports.showUserPage = showUserPage;

  exports.submitUserForm = submitUserForm;

  exports.showAdminCPanel = showAdminCPanel;

  exports.logInAdmin = logInAdmin;

  exports.showExperiments = showExperiments;

  exports.createExperiment = createExperiment;

  exports.expUsersTemplate = expUsersTemplate;

  exports.showExpUsers = showExpUsers;

  exports.addUser = addUser;

  exports.inviteOne = inviteOne;

  exports.inviteAll = inviteAll;

}).call(this);

//# sourceMappingURL=requestHandlers.map
