// Generated by CoffeeScript 1.7.1

/*
  TODO: be able to display errors on page if they occur
    an issue because of asynchronicity, need to hook up the page somehow
  TODO: update page as db is updated
 */

(function() {
  var User, addUser, callback, db, emailer, handleError, inviteAll, inviteOne, jade, logInAdmin, mongoose, queryId, settings, showAdminCPanel, showUserPage, showUsers, submitUserForm, userSchema;

  mongoose = require('mongoose');

  jade = require('jade');

  emailer = require('./modules/emailer');

  settings = require('./config');

  mongoose.connect(settings.confSite.dbUrl);

  db = mongoose.connection;

  db.on('error', console.error.bind(console, 'connection error:'));

  db.once('open', callback = function() {});


  /*
  	Schema/model for users:
  	uid: should be unique, but we can use ObjectID
  		from the DB as a unique identifier; no checking
  		of uniqueness currently in uid
  	email: again, should be unique, we don't want multiple
  		users all with the same email; again, no checking of
  		uniqueness yet
  	status: one of 'uninvited', 'invited', or 'completed'
   */

  userSchema = mongoose.Schema({
    uid: Number,
    email: String,
    status: String
  });

  User = mongoose.model('users', userSchema);

  queryId = function(id) {
    var objectId;
    objectId = mongoose.Types.ObjectId(id);
    return {
      '_id': objectId
    };
  };

  handleError = function(err, res) {
    console.error(err);
    return res.send(500);
  };

  logInAdmin = function(req, res) {
    console.log('POST admin log in with credentials ' + req.body.user + ' ' + req.body.pass);
    if (req.body.pass === settings.confSite.adminUser[req.body.user]) {
      req.session.name = req.body.user;
      return res.send(200);
    } else {
      return res.send(400);
    }
  };


  /*
    Show admin page
   */

  showAdminCPanel = function(req, res) {
    var page;
    console.log('GET view admin control panel');
    if (req.session.name) {
      page = 'server/views/admin-gui.jade';
    } else {
      page = 'server/views/admin-login.jade';
    }
    return jade.renderFile(page, {}, function(errJade, htmlResult) {
      if (errJade) {
        return handleError(errJade, res);
      } else {
        return res.send(htmlResult);
      }
    });
  };


  /*
    Returns full table of users
   */

  showUsers = function(req, res) {
    console.log('GET view user table');
    return User.find({}, 'uid email status', function(errQuery, doc) {
      if (errQuery) {
        return handleError(errQuery, res);
      } else {
        return res.send(doc);
      }
    });
  };


  /*
  	Serves user page, showing user uid and status
   */

  showUserPage = function(req, res) {
    var usr;
    console.log('GET request from ' + req.params.id);
    usr = User.findById(queryId(req.params.id));
    return usr.exec(function(errQuery, usrQuery) {
      if (errQuery) {
        return handleError(errQuery, res);
      } else if (!usrQuery) {
        console.error('showUserPage: _id not found');
        return res.send(404);
      } else {
        return jade.renderFile('server/views/user-submit.jade', {
          uid: usrQuery.uid,
          status: usrQuery.status
        }, function(errJade, htmlResult) {
          if (errJade) {
            return handleError(errJade, res);
          } else {
            return res.send(htmlResult);
          }
        });
      }
    });
  };


  /*
    Updates user status
   */

  submitUserForm = function(req, res) {
    console.log('POST request from ' + req.params.id);
    return User.findByIdAndUpdate(queryId(req.params.id), {
      '$set': {
        'status': 'completed'
      }
    }, function(errQuery, usrQuery) {
      if (errQuery) {
        return handleError(errQuery, res);
      } else if (!usrQuery) {
        console.error('submitUserForm: _id not found');
        return res.send(404);
      } else {
        console.log('uid: ' + usrQuery.uid + '| status: ' + usrQuery.status);
        return res.send(200);
      }
    });
  };


  /*
    Adds one user using fields {uid, email}
   */

  addUser = function(req, res) {
    console.log('POST add user uid:' + req.body.uid + ' email:' + req.body.email);
    return User.findOne({
      '$or': [
        {
          'uid': req.body.uid
        }, {
          'email': req.body.email
        }
      ]
    }, function(errQuery, usrQuery) {
      var usr;
      if (errQuery) {
        return handleError(errQuery, res);
      } else if (usrQuery) {
        console.error('addUser: uid or email already exists');
        return res.send(400);
      } else {
        usr = new User({
          'uid': req.body.uid,
          'email': req.body.email,
          'status': 'uninvited'
        });
        return usr.save(function(errSave) {
          if (errSave) {
            return handleError(errSave, res);
          } else {
            console.log('addUser succeeded');
            return res.send(200);
          }
        });
      }
    });
  };


  /*
    Sends an e-mail to uninvited user indicated by uid
    Updates status to invited
   */

  inviteOne = function(req, res) {
    var usr;
    console.log('POST invite ' + req.body.uid);
    usr = User.findOneAndUpdate({
      'uid': req.body.uid,
      'status': 'uninvited'
    }, {
      $set: {
        'status': 'invited'
      }
    });
    return usr.exec(function(errQuery, usrQuery) {
      if (errQuery) {
        handleError(errQuery, res);
      }
      if (!usrQuery) {
        console.error('inviteOne: no such user or user already invited');
        return res.send(400);
      } else {
        return jade.renderFile('server/views/email-invite.jade', {
          expname: 'Default',
          rooturl: settings.confSite.rootUrl,
          uid: usr._id
        }, function(errJade, htmlResult) {
          if (errJade) {
            return handleError(errJade, res);
          } else {
            emailer.sendEmail(usr.email, 'Invitation', htmlResult);
            return res.send(200);
          }
        });
      }
    });
  };


  /*
    Sends e-mails to all uninvited users
    Updates each status to invited
   */

  inviteAll = function(req, res) {
    var usrs;
    console.log('POST: invite all uninvited');
    usrs = User.find({
      'status': 'uninvited'
    });
    return usrs.exec(function(errQuery, usrQuery) {
      var usr, _i, _len, _results;
      if (errQuery) {
        return handleError(errQuery, res);
      } else if (usrQuery.length === 0) {
        console.error('inviteAll: no uninvited users');
        return res.send(200);
      } else {
        _results = [];
        for (_i = 0, _len = usrQuery.length; _i < _len; _i++) {
          usr = usrQuery[_i];
          _results.push((function(usr) {
            jade.renderFile('server/views/email-invite.jade', {
              expname: 'Default',
              rooturl: settings.confSite.rootUrl,
              uid: usr._id
            }, function(errJade, htmlResult) {
              if (errJade) {
                return handleError(errJade, res);
              } else {
                return emailer.sendEmail(usr.email, 'Invitation', htmlResult);
              }
            });
            usr.status = 'invited';
            usr.save();
            return res.send(200);
          })(usr));
        }
        return _results;
      }
    });
  };

  exports.showAdminCPanel = showAdminCPanel;

  exports.logInAdmin = logInAdmin;

  exports.showUsers = showUsers;

  exports.showUserPage = showUserPage;

  exports.submitUserForm = submitUserForm;

  exports.addUser = addUser;

  exports.inviteOne = inviteOne;

  exports.inviteAll = inviteAll;

}).call(this);

//# sourceMappingURL=requestHandlers.map
